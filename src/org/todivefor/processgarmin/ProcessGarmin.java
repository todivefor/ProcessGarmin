/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.todivefor.processgarmin;

import java.awt.Container;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.UIManager.addPropertyChangeListener;
import jxl.Workbook;
import jxl.format.Alignment;
import jxl.write.DateTime;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.DateRecord;
import org.todivefor.string.utils.StringUtils;

/**
 *
 * @author peterream
 */
public class ProcessGarmin
{
    static JFrame mainFrame;
    public boolean eof = false;                                 // Archive file - EOF
    public int count = 0;                                       // Count of records
    public int position = 0;                                    // Position within String
    public String inputString;                                  // Input data
    public boolean test = false;                                // Use filechooser or not   <debug>
 
//  Data elements used in Swingworker
    
    public static String spreadsheetName = "GarminData.xls";    // Name of spreadsheet
    public static String yearToExtract;                         // Year data to extract
    public static String courseToExtract;                       // Course substring to extract
    public static String inputPath;                             // PATH TO GARMIN DATA
    public static String outputPath;                            // Path to spreadsheet
    public static String sheetName;                             // Spreadsheet sheet name
    public static boolean debug = false;                        // Debug mode               <debug>
    public static String scoreCard;

    /**
     * Creates new form NewJFrame
     */
    public ProcessGarmin()
    {
        mainFrame = new JFrame();
        initComponents();
        btnExit.setVisible(false);                                  // Make exit button invisible
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fc = new javax.swing.JFileChooser();
        chooseScoreCard = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFieldYear = new javax.swing.JTextField();
        txtFieldCourse = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Extract Scorecard Data");

        chooseScoreCard.setText("Extract to Excel");
        chooseScoreCard.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chooseScoreCardActionPerformed(evt);
            }
        });

        jLabel1.setText("Year to extract");

        jLabel2.setText("Course to extract");

        txtFieldCourse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtFieldCourseActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter year  and/or course (substring) or leave blank to extract all");

        progressBar.setStringPainted(true);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chooseScoreCard)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(btnExit)))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFieldCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(chooseScoreCard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit)
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void chooseScoreCardActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseScoreCardActionPerformed
    {//GEN-HEADEREND:event_chooseScoreCardActionPerformed
        chooseScoreCard.setVisible(false);                              // Set extract button invisible
        yearToExtract = txtFieldYear.getText();                         // Year to extract            
        if (!(yearToExtract.equals("")))                                // Anything input?
        {
            if (!StringUtils.isInteger(yearToExtract))                  // Yes, valid year?
                    {
                        JOptionPane.showConfirmDialog(mainFrame, 
                                "Invalid year");                        // Invalid year
                        System.exit(98);                                // Quit
                    }
            else
                sheetName = yearToExtract;                              // Set sheet name to year
        }
        courseToExtract = txtFieldCourse.getText();                     // Get course to extract
        if (!(courseToExtract.equals("")))                              // Course entered?
            spreadsheetName = courseToExtract + ".xls";                 // Set spreadsheet to course name
        
//      Get inputpath to data (Scorecard directory)

        fc.setDialogTitle("Select input directory (Scorecards) from Garmin");
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);	// Look at files and dirs
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)                   // Selected?
            scoreCard = fc.getSelectedFile().getAbsolutePath();         // Yes, get path
        else
            if (returnVal == JFileChooser.CANCEL_OPTION)                // Cancel?
            {
                System.out.println("No input directory, aborting");
                System.exit(99);                                        // Get out
            }
        FileSystem fs = FileSystems.getDefault();                       // File system
        Path path = fs.getPath(scoreCard);                              // Path per file system
        inputPath = path.toString();                             // Convert path to string

//      Get output path to spreadsheet directory
     
        fc.setCurrentDirectory(null);                                   // Reset to home directory
        fc.setDialogTitle("Select output directory for spreadsheet");
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);	// Look at files and dirs
        returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)                   // Selected?
            scoreCard = fc.getSelectedFile().getAbsolutePath();         // Yes, get path
        else
            if (returnVal == JFileChooser.CANCEL_OPTION)                // Cancel?
            {
                System.out.println("No output directory, aborting");
                System.exit(99);                                        // Get out
            }
        path = fs.getPath(scoreCard);                                   // Path per file system
        
        outputPath = path.toString();                            // Convert path to string
        
        if (test)                                                       // Testing mode:
        {
            inputPath = "/Users/peterream/Desktop/Desktop "
                    + "Archive/Crashplan/Java Testing/Garmin/Garmin/Data"
                    + "/Scorecards";                                    // Yes - just use crashplan path
            outputPath = "/Users/peterream/Desktop/Desktop "
                    + "Archive/Crashplan";                              // Yes - just use crashplan path
        }   
                
//      Swingworker to process input and build spreadsheet
        
        ProcessDataRows worker = new ProcessDataRows();         // Process data in background
        worker.execute();                                       // Do it
        worker.addPropertyChangeListener(new PropertyChangeListener() 
        {
            public void propertyChange(PropertyChangeEvent evt) 
            {
                String propertyName = evt.getNewValue().toString();
                if (debug)
                    System.out.println(evt);                        // Print event
                switch (propertyName)
                {
                    case "STARTED":                                 // Ignore
                        break;
                    case "DONE":                                    // Done or exception
                        
//                  Show exceptions caught in Swingworker
                        
                    try
                    {
                        worker.get();
                    }
                    catch (InterruptedException ex)
                    {
                        Logger.getLogger(ProcessGarmin.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    catch (ExecutionException ex)
                    {
                        Logger.getLogger(ProcessGarmin.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                        progressBar.setValue(100);                  // Done, make 100 percent
                        btnExit.setVisible(true);                   // Make EXit button visible
                        break;
                    default:                                        // Default is progress percent
                        progressBar.setValue((Integer) evt.getNewValue());
                        break;
                }
            }
        });
        
    }//GEN-LAST:event_chooseScoreCardActionPerformed

    private void txtFieldCourseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtFieldCourseActionPerformed
    {//GEN-HEADEREND:event_txtFieldCourseActionPerformed

    }//GEN-LAST:event_txtFieldCourseActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExitActionPerformed
    {//GEN-HEADEREND:event_btnExitActionPerformed
        System.exit(0);                                         // Exit application
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ProcessGarmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ProcessGarmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ProcessGarmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ProcessGarmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ProcessGarmin();
                mainFrame.setTitle("Extract Scorecard Data");
                mainFrame.setVisible(true);
            }
        });
    }

    private void setDefaultCloseOperation(int exit)
    {
        mainFrame.setDefaultCloseOperation(exit);
    }

    private Container getContentPane()
    {
        return mainFrame.getContentPane();
    }

    private void pack()
    {
        mainFrame.pack();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton chooseScoreCard;
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtFieldCourse;
    private javax.swing.JTextField txtFieldYear;
    // End of variables declaration//GEN-END:variables

    private void setTitle(String extract_Scorecard_Data)
    {
        mainFrame.setTitle(extract_Scorecard_Data);
    }

    private void setLocationRelativeTo(Object object)
    {
        mainFrame.setLocationRelativeTo(null);
    }
}
